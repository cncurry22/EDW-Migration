from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import numpy as np
import domojupyter as domo
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
import matplotlib.pyplot as plt

df = domo.read_dataframe('CollegeHouseBedBathLeasingAndRatesforAnalysis', query='SELECT * FROM table')

df['year'] = df['asofdate'].dt.year
df['month'] = df['asofdate'].dt.month
df['day'] = df['asofdate'].dt.day
df['semester'] = df['month'].apply(lambda x: 'Spring' if x < 6 else ('Summer' if x < 9 else 'Fall'))
df['daysleftinschoolyear'] = (df['academicyearenddate'] - df['asofdate']).dt.days
# df['dayspassedinschoolyear'] = (df['asofdate'] - df['academicyearenddate']).dt.days


region_mapping = df['region'].astype('category').cat.categories
state_mapping = df['state'].astype('category').cat.categories
city_mapping = df['city'].astype('category').cat.categories
college_mapping = df['college'].astype('category').cat.categories
community_mapping = df['subjectcommunity'].astype('category').cat.categories
semester_mapping = df['semester'].astype('category').cat.categories


df['region'] = df['region'].astype('category').cat.codes
df['state'] = df['state'].astype('category').cat.codes
df['city'] = df['city'].astype('category').cat.codes
df['college'] = df['college'].astype('category').cat.codes
df['subjectcommunity'] = df['subjectcommunity'].astype('category').cat.codes
df['semester'] = df['semester'].astype('category').cat.codes


df_cleaned = df.dropna()
df_cleaned = df_cleaned.drop(['academicyearbegindate', 'academicyearenddate'], axis=1)
Visual Inspection
import matplotlib.pyplot as plt
import pandas as pd
import matplotlib.dates as mdates

# Assuming df is your DataFrame and 'date_column' is the column with dates
df_cleaned['asofdate'] = pd.to_datetime(df_cleaned['asofdate'], errors='coerce')  # Safely convert to datetime, invalid parsing will be set as NaT

# Drop rows with NaT values if any resulted from conversion
df_cleaned.dropna(subset=['asofdate'], inplace=True)

# Ensure dates are within the supported range by Matplotlib
df_cleaned = df_cleaned[(df_cleaned['asofdate'] >= '0001-01-01') & (df_cleaned['asofdate'] <= '9999-12-31')]

# Plotting
plt.figure(figsize=(10, 6))
plt.plot(df['asofdate'], df['marketprelease'])

# Formatting the date axis
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
plt.gca().xaxis.set_major_locator(mdates.YearLocator())
plt.gcf().autofmt_xdate()  # Rotate date labels for better readability

plt.show()
No description has been provided for this image
Autocorrelation Function (ACF)
The ACF plot can help identify seasonality by showing autocorrelations for different lags. Seasonal data often exhibit spikes at lags corresponding to the seasonality period (e.g., at 12 months for annual seasonality).

from statsmodels.graphics.tsaplots import plot_acf

# Plotting the ACF
plot_acf(df_cleaned['marketprelease'], lags=50)  # Adjust the lags as needed
plt.show()
No description has been provided for this image
Seasonal Decomposition
Seasonal decomposition separates the time series into trend, seasonality, and residual components, making it easier to identify seasonal patterns.

from statsmodels.tsa.seasonal import seasonal_decompose

# Decomposing the series
result = seasonal_decompose(df_cleaned['marketprelease'], model='additive', period=12)  # Adjust the period based on your data's frequency

# Plotting the decomposed components
result.plot()
plt.show()
No description has been provided for this image
Fourier Analysis
Fourier analysis transforms your time series into the frequency domain, allowing you to identify dominant cycles. Peaks in the Fourier transform indicate the presence of seasonality.

import numpy as np

y = df_cleaned['marketprelease'].values
n = len(y)
f = np.fft.fftfreq(n)
power = np.abs(np.fft.fft(y))**2

plt.figure(figsize=(10, 6))
plt.plot(f[:n // 2], power[:n // 2])  # Only plotting the positive frequencies
plt.xlabel('Frequency')
plt.ylabel('Power')
plt.show()
No description has been provided for this image
Periodogram
A periodogram can help identify the frequency of seasonal cycles by showing the spectral density of the series.

from scipy.signal import periodogram

frequencies, spectrum = periodogram(df_cleaned['marketprelease'])

plt.figure(figsize=(10, 6))
plt.plot(frequencies, spectrum)
plt.xlabel('Frequency')
plt.ylabel('Spectral Density')
plt.show()
No description has been provided for this image
Arima Model
from statsmodels.tsa.arima.model import ARIMA
import pandas as pd

# Selecting the target variable
y = df_cleaned['subjectprelease']

# Define the ARIMA model
# The order parameter is (p, d, q) where:
# p = number of autoregressive terms,
# d = number of nonseasonal differences needed for stationarity,
# q = number of lagged forecast errors in the prediction equation.
model = ARIMA(y, order=(1, 1, 1))

# Fit the model
model_fit = model.fit()

# Forecast
forecast = model_fit.forecast(steps=5)
print(forecast)
/home/domo/.conda/lib/python3.9/site-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.
  self._init_dates(dates, freq)
/home/domo/.conda/lib/python3.9/site-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.
  self._init_dates(dates, freq)
/home/domo/.conda/lib/python3.9/site-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.
  self._init_dates(dates, freq)
14677    0.551395
14678    0.487092
14679    0.465602
14680    0.458419
14681    0.456019
Name: predicted_mean, dtype: float64
/home/domo/.conda/lib/python3.9/site-packages/statsmodels/tsa/base/tsa_model.py:836: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.
  return get_prediction_index(
/home/domo/.conda/lib/python3.9/site-packages/statsmodels/tsa/base/tsa_model.py:836: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.
  return get_prediction_index(
SARIMA Model
from statsmodels.tsa.statespace.sarimax import SARIMAX

# Define the SARIMA model
# The seasonal_order parameter is (P, D, Q, S) where:
# P, D, Q are the seasonal equivalents of p, d, q,
# S is the length of the seasonal cycle.
model = SARIMAX(y, order=(1, 1, 1), seasonal_order=(1, 1, 1, 12))

# Fit the model
model_fit = model.fit()

# Forecast
forecast = model_fit.forecast(steps=5)
print(forecast)
/home/domo/.conda/lib/python3.9/site-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.
  self._init_dates(dates, freq)
/home/domo/.conda/lib/python3.9/site-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.
  self._init_dates(dates, freq)
 This problem is unconstrained.
RUNNING THE L-BFGS-B CODE

           * * *

Machine precision = 2.220D-16
 N =            5     M =           10

At X0         0 variables are exactly at the bounds

At iterate    0    f=  1.36470D-01    |proj g|=  1.22751D+00

At iterate    5    f=  4.75916D-02    |proj g|=  4.86963D-01

At iterate   10    f= -4.84035D-02    |proj g|=  3.94502D-02

At iterate   15    f= -5.88319D-02    |proj g|=  1.27840D-02

At iterate   20    f= -5.89204D-02    |proj g|=  2.47309D-02

At iterate   25    f= -6.10909D-02    |proj g|=  2.46256D-02

At iterate   30    f= -6.19634D-02    |proj g|=  1.97757D-03

At iterate   35    f= -6.20119D-02    |proj g|=  1.75473D-05

           * * *

Tit   = total number of iterations
Tnf   = total number of function evaluations
Tnint = total number of segments explored during Cauchy searches
Skip  = number of BFGS updates skipped
Nact  = number of active bounds at final generalized Cauchy point
Projg = norm of the final projected gradient
F     = final function value

           * * *

   N    Tit     Tnf  Tnint  Skip  Nact     Projg        F
    5     36     44      1     0     0   7.144D-06  -6.201D-02
  F =  -6.2011942882688915E-002

CONVERGENCE: NORM_OF_PROJECTED_GRADIENT_<=_PGTOL            
14677    0.567319
14678    0.494571
14679    0.461797
14680    0.457985
14681    0.456203
Name: predicted_mean, dtype: float64
/home/domo/.conda/lib/python3.9/site-packages/statsmodels/tsa/base/tsa_model.py:836: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.
  return get_prediction_index(
/home/domo/.conda/lib/python3.9/site-packages/statsmodels/tsa/base/tsa_model.py:836: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.
  return get_prediction_index(
Prophet Model
# !pip install prophet
Collecting prophet
  Downloading prophet-1.1.5-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.5 kB)
Collecting cmdstanpy>=1.0.4 (from prophet)
  Downloading cmdstanpy-1.2.2-py3-none-any.whl.metadata (4.1 kB)
Requirement already satisfied: numpy>=1.15.4 in ./.conda/lib/python3.9/site-packages (from prophet) (1.26.3)
Requirement already satisfied: matplotlib>=2.0.0 in ./.conda/lib/python3.9/site-packages (from prophet) (3.7.1)
Requirement already satisfied: pandas>=1.0.4 in ./.conda/lib/python3.9/site-packages (from prophet) (2.1.4)
Collecting holidays>=0.25 (from prophet)
  Downloading holidays-0.45-py3-none-any.whl.metadata (22 kB)
Requirement already satisfied: tqdm>=4.36.1 in ./.conda/lib/python3.9/site-packages (from prophet) (4.65.0)
Requirement already satisfied: importlib-resources in ./.conda/lib/python3.9/site-packages (from prophet) (6.1.1)
Collecting stanio<2.0.0,>=0.4.0 (from cmdstanpy>=1.0.4->prophet)
  Downloading stanio-0.5.0-py3-none-any.whl.metadata (1.3 kB)
Requirement already satisfied: python-dateutil in ./.conda/lib/python3.9/site-packages (from holidays>=0.25->prophet) (2.8.2)
Requirement already satisfied: contourpy>=1.0.1 in ./.conda/lib/python3.9/site-packages (from matplotlib>=2.0.0->prophet) (1.2.0)
Requirement already satisfied: cycler>=0.10 in ./.conda/lib/python3.9/site-packages (from matplotlib>=2.0.0->prophet) (0.12.1)
Requirement already satisfied: fonttools>=4.22.0 in ./.conda/lib/python3.9/site-packages (from matplotlib>=2.0.0->prophet) (4.47.0)
Requirement already satisfied: kiwisolver>=1.0.1 in ./.conda/lib/python3.9/site-packages (from matplotlib>=2.0.0->prophet) (1.4.5)
Requirement already satisfied: packaging>=20.0 in ./.conda/lib/python3.9/site-packages (from matplotlib>=2.0.0->prophet) (23.2)
Requirement already satisfied: pillow>=6.2.0 in ./.conda/lib/python3.9/site-packages (from matplotlib>=2.0.0->prophet) (10.0.0)
Requirement already satisfied: pyparsing>=2.3.1 in ./.conda/lib/python3.9/site-packages (from matplotlib>=2.0.0->prophet) (3.1.1)
Requirement already satisfied: zipp>=3.1.0 in ./.conda/lib/python3.9/site-packages (from importlib-resources->prophet) (3.17.0)
Requirement already satisfied: pytz>=2020.1 in ./.conda/lib/python3.9/site-packages (from pandas>=1.0.4->prophet) (2023.3.post1)
Requirement already satisfied: tzdata>=2022.1 in ./.conda/lib/python3.9/site-packages (from pandas>=1.0.4->prophet) (2023.4)
Requirement already satisfied: six>=1.5 in ./.conda/lib/python3.9/site-packages (from python-dateutil->holidays>=0.25->prophet) (1.16.0)
Downloading prophet-1.1.5-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (14.4 MB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 14.4/14.4 MB 45.8 MB/s eta 0:00:00:00:010:01
Downloading cmdstanpy-1.2.2-py3-none-any.whl (94 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 94.4/94.4 kB 1.2 MB/s eta 0:00:000:00:01
Downloading holidays-0.45-py3-none-any.whl (932 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 932.4/932.4 kB 10.0 MB/s eta 0:00:0000:01
Downloading stanio-0.5.0-py3-none-any.whl (8.0 kB)
Installing collected packages: stanio, holidays, cmdstanpy, prophet
Successfully installed cmdstanpy-1.2.2 holidays-0.45 prophet-1.1.5 stanio-0.5.0
from prophet import Prophet
import pandas as pd

# Prophet requires the dataframe to have two columns: 'ds' and 'y'
df_cleaned.rename(columns={'asofdate': 'ds', 'subjectpreleasing': 'y'}, inplace=True)

# Initialize and fit the model
model = Prophet()
model.fit(df_cleaned)

# Make a future dataframe and forecast
future = model.make_future_dataframe(periods=5)
forecast = model.predict(future)

# View the forecast
print(forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail())
07:52:08 - cmdstanpy - INFO - Chain [1] start processing
07:52:09 - cmdstanpy - INFO - Chain [1] done processing
           ds         yhat  yhat_lower   yhat_upper
62 2024-03-26  1155.382953  522.532893  1779.004037
63 2024-03-27  1155.803307  545.449615  1777.198007
64 2024-03-28  1156.223662  590.142410  1764.326520
65 2024-03-29  1156.644016  536.861963  1781.004038
66 2024-03-30  1157.064370  507.090998  1756.341093
 
